version: '3.8'

services:
  api:
    build:
      context: ..
      dockerfile: infra/docker/Dockerfile.api
    ports:
      - "${API_PORT:-8000}:${API_PORT:-8000}"
    depends_on:
      - db
      - kafka
    env_file:
      - ../.env
    networks:
      - app-network

  db:
    image: postgres:13
    hostname: postgres-db
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: "${DB_USER:-postgres}"
      POSTGRES_PASSWORD: "${DB_PASSWORD:-password}"
      POSTGRES_DB: "${DB_NAME:-stockdb}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - app-network

  data_service:
    build:
      context: ..
      dockerfile: infra/docker/Dockerfile.data_service
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ../.env
    environment:
      - DB_HOST=postgres-db
    networks:
      - app-network

  training_service:
    build:
      context: ..
      dockerfile: infra/docker/Dockerfile.training_service
    depends_on:
      - db
    env_file:
      - ../.env
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
